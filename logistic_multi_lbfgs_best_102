(0.6, False, 'weighted') -0.018592978606692318
(0.6, False, 'umweighted') -0.019521195486428847
(1.0, False, 'weighted') -0.023198902606310072
(0.8, False, 'weighted') -0.023326015367727854
(0.5, False, 'umweighted') -0.023567287152883806
(0.7, True, 'weighted') -0.02367901234567914
(0.9, False, 'weighted') -0.024364534724128528
(0.4, False, 'umweighted') -0.02479768786127172
(0.7, False, 'weighted') -0.02483136824787504
(0.4, False, 'weighted') -0.025836992316136315
(0.4, True, 'weighted') -0.02624417009602209
(0.7, False, 'umweighted') -0.026565841735411003
(1.0, True, 'weighted') -0.026579813494240438
(0.3, True, 'umweighted') -0.027123664122137427
(0.8, True, 'weighted') -0.02720911086717909
(0.5, False, 'weighted') -0.02729018102029634
(0.6, True, 'weighted') -0.027520570488206445
(0.5, True, 'weighted') -0.02796159122085068
(0.9, True, 'weighted') -0.027969821673525547
(0.4, True, 'umweighted') -0.028662808406944847
(0.3, True, 'weighted') -0.029319242382651833
(0.1, False, 'weighted') -0.029846785225718382
(0.3, False, 'weighted') -0.030411184210526503
(0.5, True, 'umweighted') -0.03188052423041754
(0.3, False, 'umweighted') -0.03382881510813285
(0.2, False, 'weighted') -0.035139649507119626
(0.2, True, 'weighted') -0.03599232456140373
(0.8, False, 'umweighted') -0.03649251451267955
(0.2, False, 'umweighted') -0.0366252274105519
(0.6, True, 'umweighted') -0.0367805920048825
(0.7, True, 'umweighted') -0.04101435991445157
(0.8, True, 'umweighted') -0.04177276880901615
(0.9, False, 'umweighted') -0.04220287198289034
(0.9, True, 'umweighted') -0.04336485661989018
(0.2, True, 'umweighted') -0.04414796846573679
(1.0, False, 'umweighted') -0.04641768292682926
(1.0, True, 'umweighted') -0.0470320610687023
(0.1, True, 'weighted') -0.04718818380744001
(0.1, False, 'umweighted') -0.057251838235294
(0.1, True, 'umweighted') -0.060766646304214945


code:
        self.clf = LogisticRegression(solver= 'lbfgs', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'],
                                      class_weight=params['class_weight']).fit(x, y)
									  
weigths = [{0.0:1, 1.0:1, 2.0:1}, {0.0:2.15865, 1.0:3.84336, 2.0:3.61584}]
normalize = [True, False]
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]
# estimators_ada = list(range(10,101))
params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths}
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1

no penalty:
(True, 'umweighted') -0.06172581134364574
(False, 'umweighted') -0.06372537132464381
(True, 'weighted') -0.022762218561230133
*False, 'weighted') -0.022817133443163128