(0.9, True, 'weighted') -0.010571117759042742
(0.8, True, 'weighted') -0.01144683165624154
(0.7, True, 'weighted') -0.011854772912700606
(0.5, False, 'weighted') -0.014650530323633441
(0.5, True, 'weighted') -0.014809575625680131
(0.8, False, 'weighted') -0.016214305140059886
(1.0, False, 'weighted') -0.016491705194452037
(0.6, True, 'weighted') -0.01659776992113141
(0.6, False, 'weighted') -0.016665760130541257
(0.4, True, 'weighted') -0.016758226815338614
(1.0, True, 'weighted') -0.018789774272504802
(0.7, False, 'weighted') -0.020168615719336477
(0.9, False, 'weighted') -0.02230894751155836
(0.4, False, 'weighted') -0.023864563502855648
(0.3, True, 'weighted') -0.036926842534675035
(0.2, False, 'weighted') -0.038504215392983376
(0.2, True, 'weighted') -0.03946938775510199
(0.4, True, 'umweighted') -0.04159369050856677
(0.3, True, 'umweighted') -0.041816698395430923
(0.4, False, 'umweighted') -0.04186565134620599
(0.3, False, 'weighted') -0.04240685341310846
(0.1, False, 'weighted') -0.042420451454990314
(0.1, True, 'weighted') -0.0439216752787597
(0.5, False, 'umweighted') -0.04672559151482178
(0.3, False, 'umweighted') -0.04673918955670368
(1.0, True, 'umweighted') -0.04691596410116933
(0.9, False, 'umweighted') -0.047935817242317
(0.2, False, 'umweighted') -0.04963829208593945
(1.0, False, 'umweighted') -0.05086211585531671
(0.9, True, 'umweighted') -0.05183845526244209
(0.2, True, 'umweighted') -0.05311939080772345
(0.1, True, 'umweighted') -0.05421539298341016
(0.8, True, 'umweighted') -0.05498504215392971
(0.1, False, 'umweighted') -0.056644003263529794
(0.6, False, 'umweighted') -0.05812075061191181
(0.5, True, 'umweighted') -0.059570301876529674
(0.8, False, 'umweighted') -0.059779711721512
(0.7, True, 'umweighted') -0.06069621974435674
(0.6, True, 'umweighted') -0.0628501495784606
(0.7, False, 'umweighted') -0.07194180038074513

code:
        self.clf = LogisticRegression(solver= 'lbfgs', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'],
                                      class_weight=params['class_weight']).fit(x, y)
									  
weigths = [{0.0:1, 1.0:1, 2.0:1}, {0.0:2.15865, 1.0:3.84336, 2.0:3.61584}]
normalize = [True, False]
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]
# estimators_ada = list(range(10,101))
params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths}
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1

no normal_games()
(0.9, True, 'weighted') -0.03318107221006584
(0.5, True, 'weighted') -0.039608862144420325
(0.5, False, 'weighted') -0.04111262985237851
(0.4, True, 'weighted') -0.04558960328317387
(0.7, False, 'weighted') -0.04592988222404834
(0.4, False, 'weighted') -0.046204159824849635
(0.9, False, 'weighted') -0.04724137931034497
(0.7, True, 'weighted') -0.048160196828868386
(0.8, True, 'weighted') -0.048513957307060915
(0.1, True, 'umweighted') -0.04863595302619702
(0.2, False, 'weighted') -0.04943060498220654
(1.0, False, 'weighted') -0.05080098414434131
(0.3, True, 'weighted') -0.0523912448700412
(0.1, True, 'weighted') -0.05245546725130186
(1.0, True, 'weighted') -0.05293811610076685
(0.3, False, 'weighted') -0.053120897155361224
(0.6, False, 'weighted') -0.05330142231947494
(0.4, True, 'umweighted') -0.05543791241751662
(1.0, False, 'umweighted') -0.05562969642320415
(0.2, True, 'weighted') -0.05579436696745977
(0.6, True, 'weighted') -0.056287982480153397
(0.1, False, 'weighted') -0.05638303693570461
(0.8, True, 'umweighted') -0.05682061978545896
(1.0, True, 'umweighted') -0.057613095238095324
(0.8, False, 'weighted') -0.059695973705834154
(0.5, False, 'umweighted') -0.06314397354974463
(0.9, False, 'umweighted') -0.06385628742514968
(0.6, True, 'umweighted') -0.0666166766646672
(0.3, False, 'umweighted') -0.07039116154075845
(0.5, True, 'umweighted') -0.07314532975231282
(0.4, False, 'umweighted') -0.0737545126353791
(0.2, True, 'umweighted') -0.07508235998802042
(0.2, False, 'umweighted') -0.07529394210683378
(0.6, False, 'umweighted') -0.07593637454981997
(0.7, True, 'umweighted') -0.07606971153846155
(0.3, True, 'umweighted') -0.07686678614097985
(0.8, False, 'umweighted') -0.07816796174536768
(0.1, False, 'umweighted') -0.07939339339339346
(0.9, True, 'umweighted') -0.08029649595687341
(0.7, False, 'umweighted') -0.08425411061285505
sort_orders = sorted(best_params.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
      print(i[0], i[1])