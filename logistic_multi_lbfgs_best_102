(0.3, True, 'weighted') -0.07504011065006928
(0.6, True, 'weighted') -0.07679568703345313
(0.1, True, 'umweighted') -0.07785933660933658
(0.2, True, 'umweighted') -0.07863885505481127
(0.8, True, 'weighted') -0.08048186098033794
(0.2, False, 'umweighted') -0.08098630136986307
(0.6, False, 'weighted') -0.0814759535655058
(0.2, True, 'weighted') -0.08171965717445397
(0.7, True, 'weighted') -0.08267441860465119
(0.1, True, 'weighted') -0.08412317039491862
(0.7, False, 'weighted') -0.08491694352159466
(0.4, True, 'weighted') -0.085787728026534
(0.1, False, 'umweighted') -0.08608575803981615
(0.9, True, 'weighted') -0.0864441982830241
(0.3, True, 'umweighted') -0.08648458956362524
(1.0, True, 'weighted') -0.0864847645429363
(0.5, True, 'weighted') -0.0866546762589928
(0.5, False, 'weighted') -0.08711639480232229
(0.3, False, 'weighted') -0.08711995577667227
(0.3, False, 'umweighted') -0.08726500909642199
(0.1, False, 'weighted') -0.08776581054957173
(0.9, False, 'weighted') -0.08798449612403103
(0.4, False, 'weighted') -0.08828681956341529
(0.8, False, 'weighted') -0.0885441461389427
(0.5, False, 'umweighted') -0.08877924415116967
(1.0, False, 'weighted') -0.08899336283185841
(0.4, True, 'umweighted') -0.08934703748488505
(0.4, False, 'umweighted') -0.09006940253470125
(0.2, False, 'weighted') -0.09065193370165729
(0.6, False, 'umweighted') -0.09107057416267936
(0.5, True, 'umweighted') -0.09159206969059766
(0.6, True, 'umweighted') -0.09232983508245869
(0.7, True, 'umweighted') -0.09461492537313422
(0.7, False, 'umweighted') -0.09797313432835807
(0.8, False, 'umweighted') -0.09812350835322181
(0.8, True, 'umweighted') -0.09918951132300342
(0.9, True, 'umweighted') -0.10345513963161006
(0.9, False, 'umweighted') -0.10350386674598437
(1.0, False, 'umweighted') -0.10507879869164424
(1.0, True, 'umweighted') -0.10908603751116387
no penalty:
(True, 'umweighted') -0.09072590011614408
(False, 'umweighted') -0.09126596980255522
(True, 'weighted') -0.09871745152354566
*False, 'weighted') -0.09666574279379149



code:
        self.clf = LogisticRegression(solver= 'lbfgs', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'],
                                      class_weight=params['class_weight']).fit(x, y)
									  
weigths = [{0.0:1, 1.0:1, 2.0:1}, {0.0:2.15865, 1.0:3.84336, 2.0:3.61584}]
normalize = [True, False]
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]
# estimators_ada = list(range(10,101))
params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths}
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1

