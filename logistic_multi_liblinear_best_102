(0.1, False, 'l2', 'umweighted') -0.05872617246596067
(0.1, True, 'l2', 'umweighted') -0.060036286664650766
(0.3, False, 'l2', 'umweighted') -0.07231043710972333
(0.3, True, 'l2', 'umweighted') -0.07251710800357022
(0.1, False, 'l1', 'weighted') -0.07276137931034495
(0.9, False, 'l2', 'umweighted') -0.07597376093294439
(0.9, True, 'l2', 'umweighted') -0.07598367822792164
(0.8, False, 'l2', 'umweighted') -0.07617475160724688
(0.7, False, 'l2', 'umweighted') -0.0766891297978316
(0.8, True, 'l2', 'umweighted') -0.0766929593923456
(0.2, False, 'l2', 'umweighted') -0.07673347292850725
(0.7, True, 'l2', 'umweighted') -0.07727512452387904
(0.1, True, 'l1', 'weighted') -0.07846090308370046
(0.4, True, 'l2', 'weighted') -0.07905980528511825
(0.6, True, 'l2', 'umweighted') -0.07928150765606573
(1.0, False, 'l2', 'umweighted') -0.07946817785527445
(0.2, True, 'l2', 'umweighted') -0.07973715651134998
(0.4, True, 'l2', 'umweighted') -0.08010074074074049
(0.4, False, 'l2', 'umweighted') -0.08099200473793282
(1.0, True, 'l2', 'umweighted') -0.08178249491131122
(0.5, True, 'l2', 'weighted') -0.08206070732386526
(0.6, False, 'l2', 'umweighted') -0.08209767578699598
(0.5, True, 'l2', 'umweighted') -0.08282968657599028
(0.5, False, 'l2', 'weighted') -0.08338997214484686
(0.6, True, 'l1', 'weighted') -0.08365765263451354
(0.1, True, 'l1', 'umweighted') -0.08365935405240693
(0.1, False, 'l1', 'umweighted') -0.08381690997566903
(0.5, False, 'l2', 'umweighted') -0.08404192500738092
(0.3, False, 'l2', 'weighted') -0.08420701168614357
(0.1, True, 'l2', 'weighted') -0.08507053941908721
(1.0, True, 'l1', 'weighted') -0.08549162011173186
(0.8, True, 'l1', 'weighted') -0.08561785216178523
(0.3, True, 'l1', 'weighted') -0.08570114301644835
(0.8, True, 'l2', 'weighted') -0.0860613668061367
(0.6, False, 'l1', 'umweighted') -0.08621416032767679
(0.7, True, 'l1', 'weighted') -0.08638089919017039
(1.0, False, 'l1', 'weighted') -0.08686888454011746
(0.8, False, 'l2', 'weighted') -0.0869539748953975
(0.4, False, 'l2', 'weighted') -0.08711624026696327
(0.3, True, 'l2', 'weighted') -0.08718419588202557
(0.8, False, 'l1', 'weighted') -0.08727754532775453
(0.5, True, 'l1', 'weighted') -0.08731326644370127
(0.6, True, 'l2', 'weighted') -0.08743231928551502
(0.9, True, 'l1', 'weighted') -0.08755301339285715
(0.6, False, 'l2', 'weighted') -0.08763819095477396
(0.2, True, 'l1', 'umweighted') -0.08854115479115457
(0.1, False, 'l2', 'weighted') -0.08865006915629327
(0.6, False, 'l1', 'weighted') -0.08889260808926086
(0.9, True, 'l2', 'weighted') -0.08910435267857143
(0.7, False, 'l1', 'weighted') -0.08915249512127128
(0.9, False, 'l2', 'weighted') -0.08926277576096064
(0.9, False, 'l1', 'weighted') -0.0893297961463278
(0.7, False, 'l2', 'weighted') -0.08943000838222975
(0.4, True, 'l1', 'weighted') -0.08977126917712694
(0.2, False, 'l1', 'umweighted') -0.08977552275522736
(1.0, True, 'l2', 'weighted') -0.08998323554065382
(0.4, False, 'l1', 'weighted') -0.09051339285714291
(0.7, True, 'l2', 'weighted') -0.09055555555555565
(0.3, False, 'l1', 'umweighted') -0.09076201995766531
(0.5, False, 'l1', 'umweighted') -0.09102616877388976
(0.6, True, 'l1', 'umweighted') -0.09118370934661564
(0.2, False, 'l1', 'weighted') -0.09178591236827513
(0.7, False, 'l1', 'umweighted') -0.09191557496360972
(0.5, False, 'l1', 'weighted') -0.09210482297184279
(1.0, False, 'l2', 'weighted') -0.09257965343767467
(0.9, False, 'l1', 'umweighted') -0.09341265235055117
(0.8, False, 'l1', 'umweighted') -0.09387547279604289
(1.0, False, 'l1', 'umweighted') -0.09398258345428137
(0.3, False, 'l1', 'weighted') -0.09421052631578955
(0.2, True, 'l2', 'weighted') -0.09552164261931183
(0.7, True, 'l1', 'umweighted') -0.09646216768916135
(0.2, True, 'l1', 'weighted') -0.09686443027446628
(0.3, True, 'l1', 'umweighted') -0.09710883328308692
(1.0, True, 'l1', 'umweighted') -0.09765525246662782
(0.4, True, 'l1', 'umweighted') -0.09780023781212815
(0.8, True, 'l1', 'umweighted') -0.09815958066394856
(0.9, True, 'l1', 'umweighted') -0.09856935155568464
(0.5, True, 'l1', 'umweighted') -0.09927052569403408
(0.2, False, 'l2', 'weighted') -0.09929503191784621
(0.4, False, 'l1', 'umweighted') -0.10204862140527693
code:
    def __init__(self, x, y, params):
        self.clf = LogisticRegression(solver= 'liblinear', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'], penalty = params['penalty'],
                                      class_weight=params['class_weight']).fit(x, y)
        self.X = x
        self.Y = y

normal_games()
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]
l1_ratio = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
penalty = ['l1', 'l2']
# estimators_ada = list(range(10,101))
params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths, 'penalty' : penalty }
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], comb['penalty'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1


sort_orders = sorted(best_params.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
      print(i[0], i[1])


