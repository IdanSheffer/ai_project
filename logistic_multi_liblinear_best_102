(0.7, False, 'l2', 'umweighted') -0.03360812425328564
(0.7, True, 'l2', 'umweighted') -0.03642536643733181
(0.6, True, 'l2', 'umweighted') -0.03674955062911933
(0.6, False, 'l2', 'umweighted') -0.03867704280155649
(0.5, True, 'l2', 'umweighted') -0.041191260101765936
(0.3, True, 'l2', 'umweighted') -0.04262526252625265
(0.8, False, 'l2', 'umweighted') -0.04333532219570408
(0.5, False, 'l2', 'umweighted') -0.04579593058049074
(0.4, True, 'l2', 'umweighted') -0.04655368926214757
(1.0, True, 'l1', 'umweighted') -0.046813518406759215
(0.8, True, 'l2', 'umweighted') -0.047420125410570335
(0.9, False, 'l2', 'umweighted') -0.047877794336810754
(0.3, True, 'l1', 'umweighted') -0.048256880733944955
(0.4, True, 'l1', 'umweighted') -0.048612804878048796
(0.5, False, 'l1', 'umweighted') -0.049222120935885745
(0.2, False, 'l2', 'umweighted') -0.04931065623118599
(0.6, False, 'l1', 'umweighted') -0.049729893778452196
(0.3, False, 'l2', 'umweighted') -0.050518429727299904
(0.8, False, 'l1', 'umweighted') -0.050810892586989405
(0.7, False, 'l1', 'umweighted') -0.05271324863883849
(0.7, True, 'l1', 'umweighted') -0.0534496359223301
(0.9, True, 'l2', 'umweighted') -0.05350014894250821
(0.3, False, 'l1', 'umweighted') -0.05437000614628148
(0.1, True, 'l2', 'weighted') -0.05477460142935693
(1.0, False, 'l1', 'umweighted') -0.05546851461283518
(0.9, True, 'l1', 'umweighted') -0.055754830917874414
(0.8, True, 'l1', 'umweighted') -0.05579648697758933
(0.9, False, 'l1', 'umweighted') -0.05625112917795843
(0.4, False, 'l2', 'umweighted') -0.05637072585482897
(0.2, True, 'l2', 'umweighted') -0.0566897173782321
(1.0, False, 'l2', 'umweighted') -0.0582107770169693
(1.0, True, 'l2', 'umweighted') -0.058223742933650645
(0.5, True, 'l1', 'umweighted') -0.060094368340943664
(0.1, False, 'l2', 'weighted') -0.06057708161582866
(0.3, True, 'l2', 'weighted') -0.060681880670882725
(0.1, False, 'l1', 'weighted') -0.0608173340647286
(0.4, False, 'l1', 'umweighted') -0.06223543763342477
(0.3, False, 'l2', 'weighted') -0.06264778663733861
(0.2, False, 'l1', 'weighted') -0.06479286694101521
(0.6, True, 'l1', 'umweighted') -0.06508958396598845
(0.4, False, 'l2', 'weighted') -0.06665383557877387
(0.4, True, 'l2', 'weighted') -0.06690129227385223
(0.3, False, 'l1', 'weighted') -0.0671691378363538
(0.2, True, 'l2', 'weighted') -0.06824986241056699
(0.6, False, 'l2', 'weighted') -0.06856631810676954
(0.9, True, 'l2', 'weighted') -0.06857024793388443
(0.4, False, 'l1', 'weighted') -0.06884615384615402
(0.1, True, 'l1', 'weighted') -0.06890474883337921
(0.2, False, 'l1', 'umweighted') -0.06897199138196368
(1.0, True, 'l2', 'weighted') -0.06905759162303676
(0.5, False, 'l2', 'weighted') -0.06926527242707772
(0.1, True, 'l2', 'umweighted') -0.06933151017927679
(0.2, True, 'l1', 'umweighted') -0.06956213382670368
(0.6, True, 'l2', 'weighted') -0.06964777105118342
(0.8, False, 'l2', 'weighted') -0.06995868906637301
(0.9, False, 'l2', 'weighted') -0.07051267916207288
(0.5, False, 'l1', 'weighted') -0.07061005770816176
(0.1, False, 'l2', 'umweighted') -0.07061323618700668
(1.0, False, 'l1', 'weighted') -0.07070643210555262
(0.7, True, 'l2', 'weighted') -0.07076541850220279
(1.0, False, 'l2', 'weighted') -0.07102203856749324
(0.7, False, 'l2', 'weighted') -0.07102916895982402
(0.7, True, 'l1', 'weighted') -0.07141561297416177
(0.8, True, 'l2', 'weighted') -0.0715325248070564
(0.8, True, 'l1', 'weighted') -0.07158053875755924
(0.6, False, 'l1', 'weighted') -0.07171797691039046
(0.9, True, 'l1', 'weighted') -0.07207313720098993
(0.8, False, 'l1', 'weighted') -0.07253710830126456
(0.9, False, 'l1', 'weighted') -0.07260857614073679
(0.2, False, 'l2', 'weighted') -0.07366712517193957
(1.0, True, 'l1', 'weighted') -0.07396973865199466
(0.5, True, 'l2', 'weighted') -0.07432700247729164
(0.2, True, 'l1', 'weighted') -0.07439813545379778
(0.5, True, 'l1', 'weighted') -0.07566868464501941
(0.7, False, 'l1', 'weighted') -0.07684905141600233
(0.1, False, 'l1', 'umweighted') -0.07748311847759345
(0.6, True, 'l1', 'weighted') -0.07750137438152845
(0.1, True, 'l1', 'umweighted') -0.07824701195219108
(0.4, True, 'l1', 'weighted') -0.08321242099477896
(0.3, True, 'l1', 'weighted') -0.08586556927297685
code:
    def __init__(self, x, y, params):
        self.clf = LogisticRegression(solver= 'liblinear', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'], penalty = params['penalty'],
                                      class_weight=params['class_weight']).fit(x, y)
        self.X = x
        self.Y = y

normal_games()
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]
l1_ratio = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
penalty = ['l1', 'l2']
# estimators_ada = list(range(10,101))
params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths, 'penalty' : penalty }
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], comb['penalty'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1


sort_orders = sorted(best_params.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
      print(i[0], i[1])


