(0.6, False, 'umweighted') -0.01982012195121956
(0.9, False, 'weighted') -0.021415637860082395
(0.6, False, 'weighted') -0.021713737318343904
(0.5, False, 'umweighted') -0.022398535245651555
(0.7, False, 'umweighted') -0.022831398900427673
(0.7, True, 'weighted') -0.02415363511659825
(0.7, False, 'weighted') -0.024228132711817986
(0.8, False, 'weighted') -0.024366081229418277
(0.5, False, 'weighted') -0.025000000000000126
(0.3, True, 'umweighted') -0.026009762050030513
(1.0, True, 'weighted') -0.026131687242798584
(0.9, True, 'weighted') -0.026180021953897008
(0.4, True, 'weighted') -0.02624417009602209
(0.4, True, 'umweighted') -0.026469692354553768
(1.0, False, 'weighted') -0.026786498353457804
(0.4, False, 'weighted') -0.02703429355281226
(0.6, True, 'weighted') -0.02725377229080952
(0.3, True, 'weighted') -0.027274224540214245
(0.8, True, 'weighted') -0.027414928649835524
(0.5, True, 'weighted') -0.02796159122085068
(0.1, False, 'weighted') -0.029846785225718382
(0.2, True, 'weighted') -0.03088840142582958
(0.4, False, 'umweighted') -0.030906877662811975
(0.3, False, 'weighted') -0.03143914473684227
(0.3, False, 'umweighted') -0.03206097560975613
(0.5, True, 'umweighted') -0.03290726052471021
(0.2, False, 'weighted') -0.03420865279299038
(0.2, False, 'umweighted') -0.03594725674446807
(0.6, True, 'umweighted') -0.03668698567509903
(0.7, True, 'umweighted') -0.03786324786324786
(0.8, False, 'umweighted') -0.03810934636530242
(0.9, True, 'umweighted') -0.04059146341463415
(0.9, False, 'umweighted') -0.04150274893097131
(0.8, True, 'umweighted') -0.04157173317088031
(0.1, True, 'weighted') -0.04411491108071153
(0.2, True, 'umweighted') -0.045028796605031805
(1.0, False, 'umweighted') -0.045835875533862105
(1.0, True, 'umweighted') -0.04625457875457874
(0.1, False, 'umweighted') -0.056962917560527
(0.1, True, 'umweighted') -0.06163608562691125


code:
        self.clf = LogisticRegression(solver= 'newton-cg', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'],
                                      class_weight=params['class_weight']).fit(x, y)
									  
normal_games()
weigths = [{0.0:1, 1.0:1, 2.0:1}, {0.0:2.15865, 1.0:3.84336, 2.0:3.61584}]
normalize = [True, False]
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]
# estimators_ada = list(range(10,101))
params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths}
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1


sort_orders = sorted(best_params.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
      print(i[0], i[1])
	  
	  
no penalty:
unweighted  -0.061036677781145805
weighted -0.023978583196046156