(0.1, True, 'umweighted') -0.07706785385323915
(0.6, True, 'weighted') -0.07787551867219922
(0.2, True, 'umweighted') -0.07863885505481125
(0.3, True, 'weighted') -0.07888365650969535
(0.7, True, 'weighted') -0.08034587714443839
(0.8, True, 'weighted') -0.08058448753462617
(0.2, False, 'umweighted') -0.08124505327245056
(0.9, True, 'weighted') -0.08141749723145078
(0.2, True, 'weighted') -0.08277071823204414
(0.1, True, 'weighted') -0.08324122685824822
(0.6, False, 'weighted') -0.08386445366528354
(0.5, True, 'weighted') -0.08451880530973448
(0.5, False, 'weighted') -0.0845271017699115
(1.0, True, 'weighted') -0.08453086078051483
(0.1, False, 'umweighted') -0.08464603125957698
(0.3, False, 'weighted') -0.08520873652197965
(0.4, False, 'weighted') -0.08637468914064657
(0.3, True, 'umweighted') -0.08717901799329059
(0.4, True, 'weighted') -0.08722222222222221
(0.4, True, 'umweighted') -0.08737065052950063
(0.1, False, 'weighted') -0.08751381215469593
(0.3, False, 'umweighted') -0.08777676675765846
(0.7, False, 'weighted') -0.08790085848795344
(0.5, False, 'umweighted') -0.08796954314720801
(0.9, False, 'weighted') -0.08869288285793413
(1.0, False, 'weighted') -0.08934662236987811
(0.8, False, 'weighted') -0.09037929125138427
(0.2, False, 'weighted') -0.09039502762430925
(0.6, False, 'umweighted') -0.0906435199042202
(0.4, False, 'umweighted') -0.09100482800241398
(0.6, True, 'umweighted') -0.0915026994601079
(0.7, True, 'umweighted') -0.09281744846130853
(0.5, True, 'umweighted') -0.09445612980769219
(0.7, False, 'umweighted') -0.09677910447761179
(0.8, False, 'umweighted') -0.09913859910581208
(0.8, True, 'umweighted') -0.10038140643623346
(0.9, True, 'umweighted') -0.10226813317479175
(0.9, False, 'umweighted') -0.10479036574487051
(1.0, True, 'umweighted') -0.10573682643643925
(1.0, False, 'umweighted') -0.10652872878832972

no penalty:
unweighted -0.08747395833333328
weighted -0.08509847434119283


code:
        self.clf = LogisticRegression(solver= 'newton-cg', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'],
                                      class_weight=params['class_weight']).fit(x, y)
									  
normal_games()
weigths = [{0.0:1, 1.0:1, 2.0:1}, {0.0:2.15865, 1.0:3.84336, 2.0:3.61584}]
normalize = [True, False]
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]
# estimators_ada = list(range(10,101))
params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths}
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1


sort_orders = sorted(best_params.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
      print(i[0], i[1])
	  
	  
no penalty:
unweighted  -0.061036677781145805
weighted -0.023978583196046156