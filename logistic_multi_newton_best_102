(0.5, False, 'weighted') -0.013759521218716028
(0.9, False, 'weighted') -0.013965189012782203
(1.0, True, 'weighted') -0.014653249932009825
(0.8, True, 'weighted') -0.015014957846070204
(0.7, False, 'weighted') -0.015482730486809952
(0.7, True, 'weighted') -0.015673103073157515
(0.5, True, 'weighted') -0.016678454842219848
(0.6, False, 'weighted') -0.016861571933641607
(0.8, False, 'weighted') -0.01735654065814527
(0.9, True, 'weighted') -0.01742725047593151
(0.4, False, 'weighted') -0.01750883872722332
(1.0, False, 'weighted') -0.01838183301604574
(0.6, True, 'weighted') -0.02002719608376399
(0.4, True, 'weighted') -0.021411476747348435
(0.2, False, 'weighted') -0.03685885232526513
(0.3, False, 'weighted') -0.039080772368778854
(0.2, True, 'weighted') -0.03992655059847659
(0.4, True, 'umweighted') -0.04038346478107155
(0.3, True, 'weighted') -0.04053032363339677
(0.1, True, 'weighted') -0.040908349197715375
(0.4, False, 'umweighted') -0.04340494968724489
(0.5, False, 'umweighted') -0.043554528147946595
(0.3, True, 'umweighted') -0.04435409301060635
(0.3, False, 'umweighted') -0.04528691868370936
(0.1, False, 'weighted') -0.04669839543105777
(1.0, False, 'umweighted') -0.048332880065270485
(1.0, True, 'umweighted') -0.048550448735381994
(0.9, True, 'umweighted') -0.049741637204242475
(0.2, False, 'umweighted') -0.04978787054664111
(0.9, False, 'umweighted') -0.050429698123470104
(0.5, True, 'umweighted') -0.05132716888768009
(0.2, True, 'umweighted') -0.05429426162632557
(0.6, False, 'umweighted') -0.05491433233614352
(0.1, False, 'umweighted') -0.055281479466956496
(0.8, False, 'umweighted') -0.055784607016589445
(0.1, True, 'umweighted') -0.05657329344574361
(0.8, True, 'umweighted') -0.05689692684253458
(0.6, True, 'umweighted') -0.05974707642099528
(0.7, False, 'umweighted') -0.06450639107968442
(0.7, True, 'umweighted') -0.06637377584330785



code:
        self.clf = LogisticRegression(solver= 'newton-cg', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'],
                                      class_weight=params['class_weight']).fit(x, y)
									  
normal_games()
weigths = [{0.0:1, 1.0:1, 2.0:1}, {0.0:2.15865, 1.0:3.84336, 2.0:3.61584}]
normalize = [True, False]
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]
# estimators_ada = list(range(10,101))
params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths}
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1


sort_orders = sorted(best_params.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
      print(i[0], i[1])
	  
	  
without normal_games:
(0.5, False, 'weighted') -0.024737420951333584
(0.6, False, 'weighted') -0.02528037383177574
(1.0, True, 'weighted') -0.025316107751511826
(0.4, False, 'weighted') -0.025948323254535516
(0.3, False, 'weighted') -0.026521022258862364
(0.8, True, 'weighted') -0.02671982403079462
(0.7, False, 'weighted') -0.027080813633864824
(1.0, False, 'weighted') -0.027502061005770934
(0.9, True, 'weighted') -0.027646411877921377
(0.3, True, 'weighted') -0.027787245739417356
(0.2, True, 'weighted') -0.028963431399505257
(0.7, True, 'weighted') -0.029232884245257117
(0.9, False, 'weighted') -0.02929356789444761
(0.6, True, 'weighted') -0.029763476347634807
(0.8, False, 'weighted') -0.030384721077219127
(0.1, True, 'weighted') -0.030967032967033042
(0.4, True, 'weighted') -0.03204345434543462
(0.2, False, 'weighted') -0.03265659340659344
(0.5, True, 'weighted') -0.033099559955995644
(0.1, False, 'weighted') -0.03355104281009893
(0.6, True, 'umweighted') -0.05664443770839646
(0.7, True, 'umweighted') -0.057671523982999365
(0.5, True, 'umweighted') -0.058061780738946085
(0.8, True, 'umweighted') -0.05829386763812991
(0.4, True, 'umweighted') -0.060836352657004815
(0.9, True, 'umweighted') -0.06119054831869129
(0.4, False, 'umweighted') -0.06365256797583081
(1.0, True, 'umweighted') -0.0640018176310209
(0.3, True, 'umweighted') -0.06441671677690916
(1.0, False, 'umweighted') -0.06506961259079903
(0.7, False, 'umweighted') -0.06533595641646489
(0.9, False, 'umweighted') -0.06625189221919467
(0.1, False, 'umweighted') -0.06633193024654242
(0.8, False, 'umweighted') -0.06664344138139958
(0.6, False, 'umweighted') -0.07007252946509526
(0.1, True, 'umweighted') -0.07131231231231239
(0.5, False, 'umweighted') -0.07250452079566012
(0.2, True, 'umweighted') -0.07647482014388496
(0.3, False, 'umweighted') -0.0767600964436409
(0.2, False, 'umweighted') -0.08247211335544179