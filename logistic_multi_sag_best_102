(0.6, True, 'weighted') -0.0158621636463482
(0.8, False, 'weighted') -0.01748699698877639
(0.6, False, 'weighted') -0.01808936403508775
(0.6, False, 'umweighted') -0.01982012195121956
(0.7, False, 'umweighted') -0.022831398900427673
(0.5, False, 'umweighted') -0.023421855921855965
(0.9, True, 'weighted') -0.024530867555072073
(0.3, True, 'umweighted') -0.026009762050030513
(0.4, False, 'weighted') -0.02601920438957496
(0.4, False, 'umweighted') -0.026175395858708938
(0.3, True, 'weighted') -0.026313477902827436
(0.4, True, 'umweighted') -0.026469692354553768
(0.1, False, 'weighted') -0.029846785225718382
(0.3, False, 'weighted') -0.03064418859649142
(0.2, True, 'weighted') -0.03088840142582958
(0.7, False, 'weighted') -0.03128909437041069
(0.3, False, 'umweighted') -0.0326501982311681
(0.5, True, 'umweighted') -0.03406650396583285
(0.2, False, 'weighted') -0.03420865279299038
(0.2, False, 'umweighted') -0.03623939393939398
(0.6, True, 'umweighted') -0.036980499695307714
(0.8, True, 'weighted') -0.037245036714713034
(0.7, True, 'umweighted') -0.03756946564885496
(0.8, False, 'umweighted') -0.03810934636530242
(0.9, True, 'umweighted') -0.04070448307410796
(0.4, True, 'weighted') -0.04131134133042554
(0.9, False, 'umweighted') -0.04150274893097131
(0.8, True, 'umweighted') -0.04157173317088031
(1.0, False, 'weighted') -0.04388177608281123
(0.1, True, 'weighted') -0.04453351573187432
(0.2, True, 'umweighted') -0.04477272727272725
(1.0, True, 'umweighted') -0.04596335877862594
(1.0, False, 'umweighted') -0.046126867947544975
(0.1, False, 'umweighted') -0.057251838235294
(1.0, True, 'weighted') -0.06019377729257624
(0.1, True, 'umweighted') -0.062076452599388314
(0.7, True, 'weighted') -0.06396812311074469
(0.5, False, 'weighted') -0.07010357045516469
(0.5, True, 'weighted') -0.07681568842567203
(0.9, False, 'weighted') -0.0804098360655738
    def __init__(self, x, y, params):
        self.clf = LogisticRegression(solver= 'sag', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'],
                                      class_weight=params['class_weight']).fit(x, y)
        self.X = x
        self.Y = y


normal_games()
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]

params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths,}
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1


sort_orders = sorted(best_params.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
      print(i[0], i[1])
	  
	  
no penalty:
(True, 'umweighted') -0.061036677781145805
(False, 'umweighted') -0.061036677781145805
(True, weighted) -0.08546296296296281
(False, weighted) -0.045012291723572954
	  
