(0.7, False, 'weighted') -0.01700299156921406
(0.8, True, 'weighted') -0.019118549511855005
(0.8, False, 'weighted') -0.02299972729751845
(0.9, True, 'weighted') -0.024298877051540605
(0.6, False, 'weighted') -0.045040805223068615
(0.5, False, 'weighted') -0.0645199891215666
(1.0, False, 'weighted') -0.06636413191605328
(0.5, True, 'weighted') -0.06645116537180915
(1.0, True, 'weighted') -0.07226373626373621
(0.6, True, 'weighted') -0.07412069907154574
(0.1, True, 'umweighted') -0.07735113566605277
(0.4, False, 'weighted') -0.07826516607191884
(0.3, True, 'weighted') -0.0783545706371192
(0.2, True, 'umweighted') -0.07863885505481125
(0.7, True, 'weighted') -0.07885101704233116
(0.2, False, 'umweighted') -0.08124505327245056
(0.4, True, 'weighted') -0.08209794101279914
(0.2, True, 'weighted') -0.08277071823204414
(0.1, True, 'weighted') -0.08324122685824822
(0.1, False, 'umweighted') -0.08464603125957698
(0.3, False, 'weighted') -0.08520873652197965
(0.3, True, 'umweighted') -0.08618786215309544
(0.4, True, 'umweighted') -0.08737065052950063
(0.5, False, 'umweighted') -0.08745449119665757
(0.1, False, 'weighted') -0.08751381215469593
(0.3, False, 'umweighted') -0.08777676675765846
(0.4, False, 'umweighted') -0.08985817742908869
(0.2, False, 'weighted') -0.09039502762430925
(0.6, True, 'umweighted') -0.0915026994601079
(0.6, False, 'umweighted') -0.09157138581263086
(0.7, True, 'umweighted') -0.09335921170498646
(0.5, True, 'umweighted') -0.09528386902973861
(0.7, False, 'umweighted') -0.09677910447761179
(0.8, True, 'umweighted') -0.10011326378539478
(0.8, False, 'umweighted') -0.10080799045915309
(0.9, True, 'umweighted') -0.10253491827637429
(0.9, False, 'weighted') -0.10297791109899065
(0.9, False, 'umweighted') -0.10399107142857128
(1.0, True, 'umweighted') -0.10460553736231004
(1.0, False, 'umweighted') -0.10648986889153739

    def __init__(self, x, y, params):
        self.clf = LogisticRegression(solver= 'sag', random_state=42, max_iter=1000, C=params['c'],
                                      fit_intercept=params['fit_intercept'],
                                      class_weight=params['class_weight']).fit(x, y)
        self.X = x
        self.Y = y


normal_games()
c = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fit = [True, False]

params = {'c' : c, 'fit_intercept' : fit,
          'class_weight' : weigths,}
params_list = list(ParameterGrid(params))
best_params = dict()



j = 0
for comb in params_list:
    clf = clf_linearReg = MultiReg.MultiRegSoccerGame(games, results, comb)
    #clf.fit(games, results)
    #clf.fit(best_features, results)
    if comb['class_weight']  == {0.0:1, 1.0:1, 2.0:1}:
         is_weighted = 'umweighted'
    else:
         is_weighted = 'weighted'
    params_tuple = (comb['c'], comb['fit_intercept'], is_weighted)
    print(j)
    print(params_tuple)
    best_params[params_tuple] = play_reg(clf)
    j += 1


sort_orders = sorted(best_params.items(), key=lambda x: x[1], reverse=True)
for i in sort_orders:
      print(i[0], i[1])
	  
	  
no penalty:
umweighted   -0.08694557035321364
(True, weighted) -0.10791235710397383
(False, weighted)  -0.09444384008702737
	  
	  
no normal:
(0.1, False, 'umweighted') -0.08496553704767368
(0.1, True, 'weighted') -0.08778486276684223
(0.2, True, 'weighted') -0.0892567942318358
(0.1, True, 'umweighted') -0.09128911857594026
(0.7, False, 'umweighted') -0.09161918604651173
(0.6, False, 'weighted') -0.09221976197066134
(0.7, False, 'weighted') -0.09245919778699846
(0.2, False, 'umweighted') -0.09303519907674551
(0.6, True, 'weighted') -0.09318848602269567
(0.8, False, 'weighted') -0.09343749999999985
(0.5, False, 'weighted') -0.09343940232429425
(0.7, True, 'weighted') -0.09355186721991689
(0.5, True, 'weighted') -0.09361825726141064
(0.9, True, 'weighted') -0.09431415929203527
(0.8, True, 'weighted') -0.09433471645919764
(0.7, True, 'umweighted') -0.09438081395348846
(0.4, True, 'weighted') -0.09451121572971462
(0.8, True, 'umweighted') -0.09472262561719437
(1.0, True, 'umweighted') -0.09482858803021504
(0.4, False, 'weighted') -0.09487541528239186
(0.3, True, 'weighted') -0.09490576496674043
(0.2, True, 'umweighted') -0.09507078878936721
(0.1, False, 'weighted') -0.09517748197448689
(1.0, False, 'umweighted') -0.09522839685772483
(0.2, False, 'weighted') -0.0953050471436493
(0.3, False, 'weighted') -0.09539207536713756
(0.9, False, 'weighted') -0.09577273983964596
(1.0, True, 'weighted') -0.09602046460176979
(0.9, True, 'umweighted') -0.09608645198723535
(0.9, False, 'umweighted') -0.09632481115630455
(0.5, True, 'umweighted') -0.09648217907852802
(1.0, False, 'weighted') -0.09726493362831844
(0.8, False, 'umweighted') -0.0974106364428946
(0.3, True, 'umweighted') -0.09764638015575425
(0.6, True, 'umweighted') -0.09778229317851965
(0.4, False, 'umweighted') -0.09814034074501879
(0.3, False, 'umweighted') -0.09860847018150388
(0.6, False, 'umweighted') -0.09958115183246079
(0.5, False, 'umweighted') -0.0996113689095128
(0.4, True, 'umweighted') -0.10106647398843932

